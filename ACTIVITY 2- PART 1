#include <chrono>
#include <cstdlib>
#include <iostream>
#include <omp.h>
#include <time.h>

using namespace std::chrono;
using namespace std;

void generateRandomVector(int array[], int size) {
    for (int i = 0; i < size; i++) {
        array[i] = rand() % 100;
    }
}

int main() {
    unsigned long arraySize = 100000000;
    srand(time(0));
    int *array1, *array2, *array3;
    auto startTime = high_resolution_clock::now();
    array1 = (int *)malloc(arraySize * sizeof(int));
    array2 = (int *)malloc(arraySize * sizeof(int));
    array3 = (int *)malloc(arraySize * sizeof(int));
    generateRandomVector(array1, arraySize);
    generateRandomVector(array2, arraySize);
    
    #pragma omp parallel for default(none) shared(array1, array2, array3, arraySize)
    for (int i = 0; i < arraySize; i++) {
        array3[i] = array1[i] + array2[i];
    }

    auto stopTime = high_resolution_clock::now();
    auto elapsedTime = duration_cast<microseconds>(stopTime - startTime);
    cout << "Time taken by function: " << elapsedTime.count() << " microseconds" << endl;

    return 0;
}
